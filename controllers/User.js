var MongoClient = require('mongodb').MongoClient;
var assert = require('assert');

/**
 * Save handles both the creation and updating of records in Mongo
 * The ID of the document is generated by combining the first and last name
 * of the user.
 * @param  {JSON} userInfo   Information to store as a document
 * @param  {Object} db       MongoDB connection client
 * @return {Promise}         Promise that resolves to ID of record just inserted
 */
module.exports.save = function(userInfo, db) {
  var name_id = userInfo.first + userInfo.last;
  var infoWithId = Object.assign({_id: name_id}, userInfo);
  return new Promise(function(resolve, reject) {
    return db.collection('users').save(infoWithId, function(err, result) {
      if (err !== null) {
        reject(err);
      } else {
        console.log("Saved a document in the users collection.");
        resolve(infoWithId._id); // Node Mongo client binds ID to original reference
      }
    });
  });
};

/**
 * Looks up document in the database
 * @param  {string} userId The first + last name of user to look up
 * @param  {Object} db     MongoDB connection client
 * @return {Promise}       Promise that resolves the document with the given ID
 */
module.exports.findById = function(userId, db) {
  return new Promise(function(resolve, reject) {
    var res = db.collection('users').findOne({_id: userId});
    // resolve first record with the ID
    return Promise.resolve(res)
    .then(function(userRecord) {
      if (userRecord !== null) {
        resolve(userRecord);
      } else {
        // not found, return error for 404
        reject('User not found');
      }
    });
  });
};
